# Generated by Django 3.2.7 on 2021-09-21 09:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import hipeac.functions
import hipeac.models.files
import hipeac.models.generic
import hipeac.models.mixins
import hipeac.models.users
import hipeac.validators
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("flatpages", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActionPoint",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("discarded", "Discarded"),
                            ("not_started", "Not started"),
                            ("in_progress", "In progress"),
                            ("completed", "Completed"),
                            ("finalized", "Finalized"),
                        ],
                        default="UN",
                        max_length=16,
                    ),
                ),
                ("title", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("progress", models.TextField(blank=True, null=True, verbose_name="Progress description")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_ready", models.BooleanField(default=False)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("blog", "HiPEAC Blog"),
                            ("news", "HiPEAC News"),
                            ("release", "HiPEAC Press Release"),
                            ("jobs", "HiPEAC Career News"),
                        ],
                        default="news",
                        max_length=7,
                    ),
                ),
                ("publication_date", models.DateField()),
                ("title", models.CharField(max_length=250)),
                ("excerpt", models.TextField()),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-publication_date"],
            },
            bases=(hipeac.models.mixins.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name="B2b",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField()),
                ("start_at", models.TimeField(blank=True, null=True)),
                ("end_at", models.TimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "hipeac_event_b2b",
                "ordering": ["date", "room", "start_at"],
            },
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=48)),
                ("notes", models.CharField(blank=True, max_length=255)),
                ("header", models.TextField(blank=True)),
                ("content", models.TextField()),
            ],
            options={
                "verbose_name": "page block",
                "ordering": ["page", "key"],
            },
        ),
        migrations.CreateModel(
            name="Break",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[("coffee", "Coffee break"), ("lunch", "Lunch break")], default="coffee", max_length=16
                    ),
                ),
                ("start_at", models.DateTimeField(blank=True, null=True)),
                ("end_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                "db_table": "hipeac_event_break",
                "ordering": ["start_at"],
            },
        ),
        migrations.CreateModel(
            name="Clipping",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("general", "General"),
                            ("jobs", "Jobs"),
                            ("internships", "PhD Internships"),
                            ("industry", "Industry"),
                            ("innovation", "Innovation community"),
                            ("csw", "Computing Systems Week"),
                            ("conference", "HiPEAC Conference"),
                            ("acaces", "ACACES"),
                            ("roadshow", "HiPEAC Roadshow"),
                            ("collaborations", "Collaboration Grants"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("media", models.CharField(max_length=250)),
                ("title", models.CharField(max_length=250)),
                ("url", models.URLField()),
                ("publication_date", models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                "ordering": ["-publication_date"],
            },
        ),
        migrations.CreateModel(
            name="Committee",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("position", models.PositiveSmallIntegerField()),
            ],
            options={
                "db_table": "hipeac_event_committee",
                "ordering": ("position",),
            },
        ),
        migrations.CreateModel(
            name="Coupon",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "value",
                    models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                ("notes", models.CharField(blank=True, max_length=190, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["event", "id"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=250, null=True)),
                ("overview", models.TextField(blank=True, null=True)),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("custom_data", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "hipeac_event_course",
            },
        ),
        migrations.CreateModel(
            name="CourseSession",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_at", models.DateTimeField()),
                ("end_at", models.DateTimeField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("zoom_attendee_report", models.FileField(blank=True, null=True, upload_to="private/zoom")),
            ],
            options={
                "db_table": "hipeac_event_course_session",
                "ordering": ["start_at"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("registration_start_date", models.DateField()),
                ("registration_early_deadline", models.DateTimeField(blank=True, null=True)),
                ("registration_deadline", models.DateTimeField()),
                ("is_ready", models.BooleanField(default=False, help_text="Is programme ready?")),
                ("is_virtual", models.BooleanField(default=False, help_text="Is it a virtual event?")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("csw", "CSW"),
                            ("conference", "Conference"),
                            ("acaces", "ACACES Summer School"),
                            ("ec_meeting", "EC Consultation Meeting"),
                        ],
                        editable=False,
                        max_length=16,
                    ),
                ),
                ("presentation", models.TextField(blank=True, null=True)),
                ("city", models.CharField(blank=True, help_text="Empty for virtual events", max_length=100, null=True)),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True, db_index=True, help_text="Empty for virtual events", max_length=2, null=True
                    ),
                ),
                ("hashtag", models.CharField(blank=True, max_length=32, null=True)),
                ("slug", models.CharField(editable=False, max_length=100)),
                ("redirect_url", models.URLField(editable=False, null=True)),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        help_text="4:1 format",
                        null=True,
                        upload_to=hipeac.functions.get_images_path,
                        verbose_name="Banner",
                    ),
                ),
                ("logistics", models.TextField(blank=True, null=True)),
                ("registrations_count", models.PositiveIntegerField(default=0)),
                ("custom_data", models.JSONField(default=dict)),
            ],
            options={
                "ordering": ["-start_date"],
            },
            bases=(hipeac.models.mixins.ImagesMixin, hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Fee",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("early", "Early"),
                            ("late", "Late"),
                            ("early_student", "Early (student)"),
                            ("late_student", "Late (student)"),
                            ("booth", "Booth fee"),
                        ],
                        editable=False,
                        max_length=16,
                    ),
                ),
                (
                    "value",
                    models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)]),
                ),
                ("notes", models.CharField(blank=True, max_length=190, null=True)),
            ],
            options={
                "db_table": "hipeac_event_fee",
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.CharField(choices=[("public", "Public"), ("private", "Private")], max_length=8)),
                ("file", models.FileField(upload_to=hipeac.models.files.get_upload_path)),
                ("object_id", models.PositiveIntegerField()),
            ],
            options={
                "ordering": ["content_type", "object_id"],
            },
        ),
        migrations.CreateModel(
            name="Hipeac",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("visible", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="HipeacPartner",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("description", models.TextField(blank=True, null=True)),
                ("position", models.PositiveSmallIntegerField(default=0)),
                ("tasks", models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                "ordering": ["hipeac", "position"],
            },
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("image", models.FileField(blank=True, null=True, upload_to="public/images", verbose_name="Image")),
                ("position", models.PositiveSmallIntegerField(default=0)),
                ("object_id", models.PositiveIntegerField()),
            ],
            options={
                "ordering": ["content_type", "object_id", "position"],
            },
        ),
        migrations.CreateModel(
            name="Institution",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=190)),
                ("local_name", models.CharField(blank=True, max_length=190, null=True)),
                ("colloquial_name", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("university", "University"),
                            ("lab", "Government Lab"),
                            ("innovation", "Innovation Center"),
                            ("industry", "Industry"),
                            ("sme", "SME"),
                            ("other", "Other"),
                        ],
                        max_length=16,
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100, null=True)),
                ("country", django_countries.fields.CountryField(db_index=True, max_length=2)),
                (
                    "description",
                    models.TextField(blank=True, null=True, validators=[hipeac.validators.validate_no_badwords]),
                ),
                ("recruitment_contact", models.CharField(blank=True, max_length=190, null=True)),
                ("recruitment_email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=hipeac.functions.get_images_path,
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=["png"])],
                        verbose_name="Logo",
                    ),
                ),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                hipeac.models.mixins.ImagesMixin,
                hipeac.models.mixins.LinkMixin,
                hipeac.models.mixins.UrlMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Internship",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250)),
                ("slug", models.SlugField(editable=False, max_length=250)),
                ("description", models.TextField()),
                (
                    "timing",
                    models.CharField(
                        help_text="Describe the duration and the periods of the Internship.", max_length=400
                    ),
                ),
                ("location", models.CharField(help_text="Where will the PhD student be working?", max_length=250)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="InternshipApplication",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[("UN", "Pending"), ("OK", "Accepted"), ("NO", "Rejected")], default="UN", max_length=2
                    ),
                ),
                (
                    "host_decision",
                    models.CharField(
                        choices=[("UN", "Pending"), ("OK", "Accepted"), ("NO", "Rejected")], default="UN", max_length=2
                    ),
                ),
                ("rank", models.SmallIntegerField(default=0)),
                ("comments", models.TextField()),
                ("available_from", models.DateField(help_text="YYYY-MM-DD")),
                ("available_to", models.DateField(help_text="YYYY-MM-DD")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("selected", models.BooleanField(default=False)),
                (
                    "summary",
                    models.TextField(blank=True, help_text="Summary sent by the student to HiPEAC.", null=True),
                ),
                (
                    "advisor_string",
                    models.CharField(
                        blank=True,
                        help_text="Fill in your advisors's name here.",
                        max_length=250,
                        null=True,
                        verbose_name="Advisor",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="InternshipCall",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_date", models.DateField()),
                ("internship_deadline", models.DateField(verbose_name="Deadline for submitting internships")),
                ("application_deadline", models.DateField(verbose_name="Deadline for submitting applications")),
                ("end_date", models.DateField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_frozen",
                    models.BooleanField(
                        default=False, help_text="Check this box to avoid further editing on applications or reviews."
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="InternshipReview",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("comments", models.TextField()),
                ("feedback", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250, validators=[hipeac.validators.validate_no_badwords])),
                ("description", models.TextField(validators=[hipeac.validators.validate_no_badwords])),
                ("deadline", models.DateField(null=True)),
                ("positions", models.PositiveSmallIntegerField(default=1, null=True)),
                ("location", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        countries=hipeac.models.generic.HipeacCountries,
                        db_index=True,
                        max_length=2,
                        null=True,
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("share", models.BooleanField(default=True, editable=False)),
                ("add_to_euraxess", models.BooleanField(default=True)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "career_levels",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("keywords", models.TextField(default="[]", editable=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("processed_at", models.DateTimeField(editable=False, null=True)),
                ("reminder_sent_for", models.DateField(blank=True, editable=False, null=True)),
                ("evaluation_sent_for", models.DateField(blank=True, editable=False, null=True)),
            ],
            options={
                "ordering": ("-created_at",),
            },
            bases=(
                hipeac.models.mixins.LinkMixin,
                hipeac.models.mixins.MetadataMixin,
                hipeac.models.mixins.UrlMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="JobEvaluation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "value",
                    models.SmallIntegerField(choices=[(0, "No"), (2, "Yes"), (1, "Yes, via the HiPEAC Jobs portal!")]),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                ("selected_candidate", models.CharField(blank=True, max_length=250, null=True)),
            ],
            bases=(hipeac.models.mixins.EditorMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("website", "Website"),
                            ("dblp", "DBLP"),
                            ("linkedin", "LinkedIn"),
                            ("github", "GitHub"),
                            ("twitter", "Twitter"),
                            ("youtube", "YouTube"),
                            ("easychair", "EasyChair"),
                            ("cordis", "Cordis"),
                            ("google_maps", "Google Maps"),
                            ("google_photos", "Google Photos"),
                            ("zoom", "Zoom.us"),
                            ("other", "Other"),
                        ],
                        max_length=32,
                    ),
                ),
                ("url", models.URLField()),
                ("object_id", models.PositiveIntegerField()),
            ],
            options={
                "ordering": ["-type"],
            },
        ),
        migrations.CreateModel(
            name="Magazine",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250)),
                ("publication_date", models.DateField(default=django.utils.timezone.now)),
                ("file", models.FileField(blank=True, null=True, upload_to="private/magazine")),
                ("file_tablet", models.FileField(blank=True, null=True, upload_to="private/magazine")),
                ("issuu_url", models.URLField(blank=True, null=True)),
                ("downloads", models.PositiveSmallIntegerField(default=0)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
            ],
            options={
                "ordering": ["-publication_date"],
            },
            bases=(hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MailingList",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.CharField(max_length=160)),
                ("password", models.CharField(max_length=160)),
                ("query", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Meeting",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_at", models.DateTimeField()),
                ("end_at", models.DateTimeField()),
                ("location", models.CharField(max_length=250)),
                ("description", models.TextField()),
                ("url_webex", models.URLField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("file", models.FileField(blank=True, null=True, upload_to="private/steering/meeting")),
            ],
            options={
                "ordering": ["-start_at"],
            },
            bases=(hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MembershipRequest",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("affiliation", models.CharField(blank=True, max_length=250, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("website", models.URLField(blank=True, null=True)),
                ("motivation", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "membership_type",
                    models.CharField(
                        blank=True,
                        choices=[("member", "Member"), ("member,non-eu", "Associated member")],
                        db_index=True,
                        max_length=16,
                        null=True,
                    ),
                ),
                ("accepted", models.BooleanField(default=None, null=True)),
                ("decision_date", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "hipeac_steering_membership_request",
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="Metadata",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("gender", "Gender"),
                            ("title", "Title"),
                            ("meal_preference", "Meal preference"),
                            ("job_position", "Position"),
                            ("employment_type", "Employment type"),
                            ("application_area", "Application area"),
                            ("session_type", "Session type"),
                            ("topic", "Topic"),
                            ("project_programme", "EU project programme"),
                        ],
                        max_length=32,
                    ),
                ),
                ("value", models.CharField(max_length=64)),
                ("euraxess_value", models.CharField(blank=True, max_length=250, null=True)),
                ("position", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "ordering": ["type", "value"],
            },
        ),
        migrations.CreateModel(
            name="OpenEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("code", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("secret", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("registration_start_date", models.DateField()),
                ("registration_deadline", models.DateTimeField()),
                ("name", models.CharField(max_length=100)),
                ("presentation", models.TextField(blank=True, null=True)),
                ("city", models.CharField(max_length=100)),
                ("country", django_countries.fields.CountryField(db_index=True, max_length=2)),
                ("hashtag", models.CharField(blank=True, max_length=32, null=True)),
                ("custom_url", models.URLField(help_text="https://events.hipeac.net/...", null=True)),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        help_text="4:1 format",
                        null=True,
                        upload_to=hipeac.functions.get_images_path,
                        verbose_name="Banner",
                    ),
                ),
                ("travel_info", models.TextField(blank=True, null=True)),
                ("registrations_count", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["-start_date"],
            },
            bases=(hipeac.models.mixins.ImagesMixin, hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "flatpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="flatpages.flatpage",
                    ),
                ),
            ],
            bases=("flatpages.flatpage",),
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to="auth.user",
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True)),
                ("country", django_countries.fields.CountryField(db_index=True, max_length=2)),
                ("department", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=hipeac.functions.get_images_path,
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=["jpg"])],
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "membership_tags",
                    models.CharField(
                        blank=True, max_length=150, null=True, validators=[hipeac.models.users.validate_membership_tags]
                    ),
                ),
                ("membership_date", models.DateField(blank=True, null=True)),
                ("membership_revocation_date", models.DateField(blank=True, null=True)),
                ("is_bouncing", models.BooleanField(default=False)),
                ("is_subscribed", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "advisor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"profile__membership_tags__contains": "member"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="affiliates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "gender",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type": "gender"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="gender",
                        to="hipeac.metadata",
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profiles",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "meal_preference",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type": "meal_preference"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_meal_preference",
                        to="hipeac.metadata",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type": "job_position"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_job_position",
                        to="hipeac.metadata",
                    ),
                ),
            ],
            bases=(
                hipeac.models.mixins.ImagesMixin,
                hipeac.models.mixins.LinkMixin,
                hipeac.models.mixins.MetadataMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("acronym", models.CharField(max_length=50)),
                ("name", models.CharField(max_length=250)),
                (
                    "description",
                    models.TextField(blank=True, null=True, validators=[hipeac.validators.validate_no_badwords]),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "ec_project_id",
                    models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name="Project ID"),
                ),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=hipeac.functions.get_images_path,
                        validators=[django.core.validators.FileExtensionValidator(allowed_extensions=["png"])],
                        verbose_name="Logo",
                    ),
                ),
                (
                    "poster_file",
                    models.FileField(blank=True, null=True, upload_to="raw/projects", verbose_name="Poster"),
                ),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("keywords", models.TextField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "communication_officer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="communicating_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "coordinating_institution",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordinated_projects",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "coordinator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="coordinated_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "partners",
                    models.ManyToManyField(blank=True, related_name="participated_projects", to="hipeac.Institution"),
                ),
                (
                    "programme",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"type": "project_programme"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="project_project_programme",
                        to="hipeac.metadata",
                    ),
                ),
                (
                    "project_officer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="officed_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-end_date"],
            },
            bases=(
                hipeac.models.mixins.ImagesMixin,
                hipeac.models.mixins.LinkMixin,
                hipeac.models.mixins.UrlMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PublicationConference",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "acronym",
                    models.CharField(
                        choices=[
                            (
                                "ASPLOS",
                                "Conference on Architectural Support for Programming Languages and Operating Systems",
                            ),
                            ("DAC", "Design Automation Conference"),
                            ("FCCM", "Symposium on Field-Programmable Custom Computing Machines"),
                            ("HPCA", "International Symposium on High Performance Computer Architecture"),
                            ("ISCA", "International Symposium on Computer Architecture"),
                            ("MICRO", "Symposium on Microarchitecture"),
                            ("PLDI", "Conference on Programming Language Design and Implementation"),
                            ("POPL", "Symposium on Principles of Programming Languages"),
                        ],
                        max_length=16,
                    ),
                ),
                ("year", models.PositiveSmallIntegerField(db_index=True)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("url", models.URLField(verbose_name="DBLP event page")),
            ],
            options={
                "ordering": ("-year", "acronym"),
            },
        ),
        migrations.CreateModel(
            name="PublicityEmail",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("msgid", models.CharField(blank=True, max_length=1000, null=True)),
                ("date", models.CharField(blank=True, max_length=100, null=True)),
                ("subject", models.TextField()),
                ("content", models.TextField()),
                ("content_type", models.CharField(blank=True, max_length=190, null=True)),
                ("from_addresses", models.TextField(blank=True, null=True)),
                ("to_addresses", models.TextField(blank=True, null=True)),
                ("spam_level", models.PositiveSmallIntegerField(default=0)),
                ("keywords", models.TextField(blank=True, editable=False, null=True)),
            ],
            options={
                "db_table": "hipeac_publicity_email",
            },
        ),
        migrations.CreateModel(
            name="Registration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Pending"), (1, "Accepted internally"), (2, "Accepted"), (9, "Rejected")],
                        default=2,
                        help_text="Status is only used for physical Summer Schools were grants need to be distributed.",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("with_booth", models.BooleanField(default=False)),
                (
                    "fee_type",
                    models.CharField(
                        choices=[("regular", "Regular"), ("student", "Student")], default="regular", max_length=8
                    ),
                ),
                ("base_fee", models.PositiveSmallIntegerField(default=0, editable=False)),
                ("extra_fees", models.PositiveSmallIntegerField(default=0, editable=False)),
                ("manual_extra_fees", models.PositiveSmallIntegerField(default=0)),
                ("paid", models.PositiveSmallIntegerField(default=0, verbose_name="Paid online")),
                (
                    "paid_via_invoice",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Amount paid via invoice"),
                ),
                ("saldo", models.IntegerField(default=0)),
                ("invoice_requested", models.BooleanField(default=False)),
                ("invoice_sent", models.BooleanField(default=False)),
                ("visa_requested", models.BooleanField(default=False)),
                ("visa_sent", models.BooleanField(default=False)),
                ("custom_data", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "coupon",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="hipeac.coupon"
                    ),
                ),
                ("courses", models.ManyToManyField(related_name="registrations", to="hipeac.Course")),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="registrations", to="hipeac.event"
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("position", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_private", models.BooleanField(default=False)),
                ("start_at", models.DateTimeField(blank=True, null=True)),
                ("end_at", models.DateTimeField(blank=True, null=True)),
                ("title", models.CharField(max_length=250)),
                ("organizers", models.TextField(blank=True, null=True)),
                ("summary", models.TextField(blank=True, null=True)),
                ("program", models.TextField(blank=True, null=True)),
                (
                    "max_attendees",
                    models.PositiveSmallIntegerField(default=0, help_text="Leave on `0` for non limiting."),
                ),
                ("extra_attendees_fee", models.PositiveSmallIntegerField(default=0)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("zoom_webinar_id", models.CharField(blank=True, max_length=32, null=True)),
                ("zoom_attendee_report", models.FileField(blank=True, null=True, upload_to="private/zoom")),
                ("keywords", models.JSONField(default=list, editable=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="sessions", to="hipeac.event"
                    ),
                ),
                ("institutions", models.ManyToManyField(blank=True, related_name="sessions", to="hipeac.Institution")),
                (
                    "main_speaker",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="main_talks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("projects", models.ManyToManyField(blank=True, related_name="sessions", to="hipeac.Project")),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions",
                        to="hipeac.room",
                    ),
                ),
                (
                    "session_type",
                    models.ForeignKey(
                        limit_choices_to={"type": "session_type"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="session_type",
                        to="hipeac.metadata",
                    ),
                ),
                ("speakers", models.ManyToManyField(blank=True, related_name="talks", to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "ordering": ["start_at", "session_type__position", "room__position", "end_at"],
            },
            bases=(hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TechTransferCall",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_frozen",
                    models.BooleanField(
                        default=False, help_text="Check this box to avoid further editing on applications."
                    ),
                ),
            ],
            options={
                "ordering": ("-start_date",),
            },
        ),
        migrations.CreateModel(
            name="Venue",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("city", models.CharField(max_length=100)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Vision",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250)),
                ("introduction", models.TextField(null=True)),
                ("summary", models.TextField(null=True)),
                ("publication_date", models.DateField(default=django.utils.timezone.now)),
                ("file_draft", models.FileField(blank=True, null=True, upload_to="private/vision")),
                ("file", models.FileField(blank=True, null=True, upload_to="private/vision")),
                ("flyer", models.FileField(blank=True, null=True, upload_to="public/vision")),
                ("downloads", models.PositiveIntegerField(default=0)),
            ],
            options={
                "ordering": ["-publication_date"],
            },
            bases=(hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="VisionArticle",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250)),
                ("authors", models.CharField(blank=True, max_length=250, null=True)),
                ("dimension", models.CharField(blank=True, max_length=250, null=True)),
                ("position", models.PositiveSmallIntegerField()),
                ("abstract", models.TextField(blank=True, null=True)),
                ("downloads", models.PositiveIntegerField(default=0)),
                ("doi_url", models.URLField()),
                (
                    "vision",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="articles", to="hipeac.vision"
                    ),
                ),
            ],
            options={
                "db_table": "hipeac_vision_article",
                "ordering": ("position",),
            },
            bases=(hipeac.models.mixins.LinkMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("general", "General"),
                            ("jobs", "Jobs"),
                            ("internships", "PhD Internships"),
                            ("industry", "Industry"),
                            ("innovation", "Innovation community"),
                            ("csw", "Computing Systems Week"),
                            ("conference", "HiPEAC Conference"),
                            ("acaces", "ACACES"),
                            ("roadshow", "HiPEAC Roadshow"),
                            ("collaborations", "Collaboration Grants"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("title", models.CharField(max_length=250)),
                ("publication_date", models.DateField()),
                ("youtube_id", models.CharField(max_length=40, unique=True)),
                ("is_expert", models.BooleanField(default=True)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="videos",
                        to="hipeac.event",
                    ),
                ),
                ("projects", models.ManyToManyField(blank=True, related_name="videos", to="hipeac.Project")),
                ("users", models.ManyToManyField(blank=True, related_name="videos", to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "ordering": ["-publication_date"],
            },
        ),
        migrations.CreateModel(
            name="TechTransferApplication",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=250)),
                ("description", models.TextField(verbose_name="Description of the technology being transferred")),
                (
                    "partners_description",
                    models.TextField(verbose_name="Description of the academic partners and the company involved"),
                ),
                ("value", models.TextField(verbose_name="Estimate of the value of the agreement")),
                ("team_string", models.TextField(blank=True, null=True, verbose_name="Team (text)")),
                ("awarded", models.BooleanField(default=None, null=True)),
                (
                    "awarded_summary",
                    models.TextField(
                        help_text="Summary, if awarded, to show online.", null=True, verbose_name="Summary"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "applicant",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="technology_transfer_award_applications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "awarded_from",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ttawards_from",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "awarded_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ttawards_to",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "awardee",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="technology_transfer_financial_award",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "call",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="hipeac.techtransfercall",
                    ),
                ),
                (
                    "team",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Team members that will receive an award (certificate).",
                        related_name="technology_transfer_awards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
            },
        ),
        migrations.CreateModel(
            name="Sponsor",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "sponsorship_type",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Gold"), (2, "Silver"), (3, "Bronze"), (9, "Academic")], default=3
                    ),
                ),
                ("amount", models.PositiveSmallIntegerField(default=0)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="sponsors", to="hipeac.event"
                    ),
                ),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsored_events",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsored_events",
                        to="hipeac.project",
                    ),
                ),
            ],
            options={
                "ordering": ["sponsorship_type", "-amount", "institution__name"],
            },
        ),
        migrations.CreateModel(
            name="SessionProposal",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("first_name", models.CharField(max_length=250)),
                ("last_name", models.CharField(max_length=250)),
                ("email", models.EmailField(max_length=254)),
                ("title", models.CharField(max_length=250)),
                ("organizers", models.TextField()),
                ("summary", models.TextField()),
                ("projects", models.TextField(blank=True, null=True)),
                ("workshop_deadlines", models.TextField(blank=True, null=True)),
                ("tutorial_biblio", models.TextField(blank=True, null=True)),
                ("duration", models.CharField(max_length=250)),
                ("session_format", models.CharField(blank=True, max_length=250, null=True)),
                ("expected_attendees", models.CharField(max_length=250)),
                ("room_configuration", models.CharField(max_length=250)),
                ("previous_editions", models.TextField(blank=True, null=True)),
                ("other", models.TextField(blank=True, null=True)),
                (
                    "application_areas",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="session_proposals", to="hipeac.event"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SessionAccessLink",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("url", models.URLField(max_length=500)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="access_links", to="hipeac.session"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_access_links",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="room",
            name="venue",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="rooms", to="hipeac.venue"
            ),
        ),
        migrations.CreateModel(
            name="Roadshow",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("name", models.CharField(max_length=250)),
                ("description", models.TextField(verbose_name="Presentation")),
                ("country", django_countries.fields.CountryField(max_length=2)),
                (
                    "institutions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Optionally, indicate institutions that will attend the event.",
                        related_name="roadshow_events",
                        to="hipeac.Institution",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
            bases=(hipeac.models.mixins.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RegistrationLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="hipeac.course",
                    ),
                ),
                (
                    "registration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="logs", to="hipeac.registration"
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logs",
                        to="hipeac.session",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="registration",
            name="sessions",
            field=models.ManyToManyField(related_name="registrations", to="hipeac.Session"),
        ),
        migrations.AddField(
            model_name="registration",
            name="user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="registrations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Quote",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("general", "General"),
                            ("jobs", "Jobs"),
                            ("internships", "PhD Internships"),
                            ("industry", "Industry"),
                            ("innovation", "Innovation community"),
                            ("csw", "Computing Systems Week"),
                            ("conference", "HiPEAC Conference"),
                            ("acaces", "ACACES"),
                            ("roadshow", "HiPEAC Roadshow"),
                            ("collaborations", "Collaboration Grants"),
                        ],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("text", models.TextField()),
                ("author", models.CharField(max_length=250)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "institution",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quotes",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quotes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PublicFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=hipeac.models.generic.PublicFile.get_upload_path)),
                ("position", models.PositiveSmallIntegerField(default=0)),
                ("description", models.TextField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="public_files",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "db_table": "hipeac_files_public",
                "ordering": ["content_type", "object_id", "position"],
            },
            bases=(hipeac.models.generic.DeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("year", models.PositiveSmallIntegerField(db_index=True)),
                ("title", models.TextField()),
                ("authors_string", models.TextField(verbose_name="Full authors string from DBLP")),
                ("dblp_key", models.CharField(max_length=200, unique=True)),
                ("url", models.URLField(blank=True, null=True, verbose_name="Electronic edition")),
                ("itemtype", models.CharField(blank=True, max_length=200, null=True)),
                ("authors", models.ManyToManyField(related_name="publications", to="hipeac.Profile")),
                (
                    "conference",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="publications",
                        to="hipeac.publicationconference",
                    ),
                ),
            ],
            options={
                "ordering": ("-year", "title"),
            },
        ),
        migrations.AddField(
            model_name="profile",
            name="projects",
            field=models.ManyToManyField(blank=True, related_name="profiles", to="hipeac.Project"),
        ),
        migrations.AddField(
            model_name="profile",
            name="second_institution",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="second_profiles",
                to="hipeac.institution",
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="title",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to={"type": "title"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user_title",
                to="hipeac.metadata",
            ),
        ),
        migrations.CreateModel(
            name="PrivateFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(upload_to=hipeac.models.generic.PrivateFile.get_upload_path)),
                ("position", models.PositiveSmallIntegerField(default=0)),
                ("description", models.TextField()),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="private_files",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "db_table": "hipeac_files_private",
                "ordering": ["content_type", "object_id", "position"],
            },
            bases=(hipeac.models.generic.DeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Poster",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("student", "Student poster"),
                            ("industry", "Company poster"),
                            ("project", "EU Project poster"),
                        ],
                        max_length=16,
                    ),
                ),
                ("title", models.TextField()),
                ("authors", models.TextField(blank=True, null=True)),
                ("abstract", models.FileField(blank=True, null=True, upload_to="private/poster")),
                ("poster", models.FileField(blank=True, null=True, upload_to="private/poster")),
                ("presentation", models.FileField(blank=True, null=True, upload_to="private/poster")),
                ("video_url", models.URLField(blank=True, null=True)),
                ("breakout_room", models.CharField(blank=True, max_length=250, null=True)),
                (
                    "topics",
                    models.CharField(
                        blank=True,
                        max_length=250,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^\\d+(?:,\\d+)*\\Z"),
                                code="invalid",
                                message="Enter only digits separated by commas.",
                            )
                        ],
                    ),
                ),
                (
                    "registration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="posters", to="hipeac.registration"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhdMobility",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "type",
                    models.CharField(
                        choices=[("internship", "Internship"), ("collaboration", "Collaboration Grant")],
                        default="internship",
                        max_length=16,
                    ),
                ),
                ("title", models.CharField(max_length=250)),
                ("summary", models.TextField()),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("location", models.CharField(help_text="Where will the PhD student be working?", max_length=250)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "institution",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phd_mobilities",
                        to="hipeac.institution",
                    ),
                ),
                (
                    "internship",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phd_mobilities",
                        to="hipeac.internship",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="phd_mobilities",
                        to="hipeac.job",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phd_mobilities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "PhD mobility",
                "verbose_name_plural": "PhD mobilities",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Permission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "level",
                    models.PositiveSmallIntegerField(
                        choices=[(9, "Owner"), (7, "Administrator"), (1, "Guest")], db_index=True
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xpermissions",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xpermissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OpenRegistration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("first_name", models.CharField(max_length=250)),
                ("last_name", models.CharField(max_length=250)),
                ("email", models.EmailField(max_length=254)),
                ("affiliation", models.CharField(max_length=250)),
                ("address", models.TextField(blank=True, null=True)),
                ("zip_code", models.CharField(blank=True, max_length=250, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("country_raw", models.CharField(blank=True, max_length=250, null=True)),
                ("country", django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ("dietary_requirements", models.CharField(blank=True, max_length=250, null=True)),
                ("visa_requested", models.BooleanField(default=False)),
                ("visa_sent", models.BooleanField(default=False)),
                ("fields", models.TextField(default="{}")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="registrations", to="hipeac.openevent"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("category", models.CharField(db_index=True, max_length=32, verbose_name="category")),
                ("object_id", models.PositiveIntegerField(null=True)),
                ("value", models.TextField(verbose_name="value")),
                ("deadline", models.DateTimeField(null=True, verbose_name="deadline")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "notification",
                "verbose_name_plural": "notifications",
            },
        ),
        migrations.AddIndex(
            model_name="metadata",
            index=models.Index(fields=["type"], name="hipeac_meta_type_f3ab48_idx"),
        ),
        migrations.AddField(
            model_name="membershiprequest",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="membership_requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="magazine",
            name="event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="magazines",
                to="hipeac.event",
            ),
        ),
        migrations.AddField(
            model_name="magazine",
            name="projects",
            field=models.ManyToManyField(blank=True, related_name="magazines", to="hipeac.Project"),
        ),
        migrations.AddField(
            model_name="magazine",
            name="users",
            field=models.ManyToManyField(blank=True, related_name="magazines", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="link",
            name="content_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="links", to="contenttypes.contenttype"
            ),
        ),
        migrations.AddField(
            model_name="jobevaluation",
            name="job",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, related_name="evaluation", to="hipeac.job"
            ),
        ),
        migrations.AddField(
            model_name="jobevaluation",
            name="selected_user",
            field=models.ForeignKey(
                blank=True,
                help_text="Internal use only.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="selected_jobs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="posted_jobs",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="employment_type",
            field=models.ForeignKey(
                limit_choices_to={"type": "employment_type"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="employment_type",
                to="hipeac.metadata",
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="institution",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="jobs", to="hipeac.institution"
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="jobs",
                to="hipeac.project",
            ),
        ),
        migrations.AddField(
            model_name="internshipreview",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="collaborations",
                to="hipeac.internshipapplication",
            ),
        ),
        migrations.AddField(
            model_name="internshipreview",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="internship_reviews",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="internshipcall",
            name="manager",
            field=models.ForeignKey(
                limit_choices_to={"membership_tags__contains": "member"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="managed_internships",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="internshipapplication",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="internship_applications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="internshipapplication",
            name="internship",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="applications", to="hipeac.internship"
            ),
        ),
        migrations.AddField(
            model_name="internship",
            name="call",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="internships", to="hipeac.internshipcall"
            ),
        ),
        migrations.AddField(
            model_name="internship",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="posted_phd_internships",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="internship",
            name="institution",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="internships",
                to="hipeac.institution",
            ),
        ),
        migrations.AddField(
            model_name="institution",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="hipeac.institution",
            ),
        ),
        migrations.AddField(
            model_name="image",
            name="content_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="images", to="contenttypes.contenttype"
            ),
        ),
        migrations.AddField(
            model_name="hipeacpartner",
            name="hipeac",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="partners", to="hipeac.hipeac"
            ),
        ),
        migrations.AddField(
            model_name="hipeacpartner",
            name="institution",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="hipeac.institution"),
        ),
        migrations.AddField(
            model_name="hipeacpartner",
            name="representative",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="as_representative",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="hipeac",
            name="project",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="hipeac.project"),
        ),
        migrations.AddField(
            model_name="file",
            name="content_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="files", to="contenttypes.contenttype"
            ),
        ),
        migrations.AddField(
            model_name="fee",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="fees", to="hipeac.event"
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="coordinating_institution",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="coordinated_events",
                to="hipeac.institution",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="venues",
            field=models.ManyToManyField(blank=True, related_name="events", to="hipeac.Venue"),
        ),
        migrations.AddField(
            model_name="coursesession",
            name="course",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="sessions", to="hipeac.course"
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="courses", to="hipeac.event"
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="teachers",
            field=models.ManyToManyField(blank=True, related_name="courses", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="coupon",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="coupons", to="hipeac.event"
            ),
        ),
        migrations.AddField(
            model_name="committee",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="committees", to="hipeac.event"
            ),
        ),
        migrations.AddField(
            model_name="committee",
            name="members",
            field=models.ManyToManyField(related_name="committees", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="break",
            name="event",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="breaks", to="hipeac.event"
            ),
        ),
        migrations.AddField(
            model_name="block",
            name="page",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="blocks", to="hipeac.page"
            ),
        ),
        migrations.AddField(
            model_name="b2b",
            name="event",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="b2b", to="hipeac.event"),
        ),
        migrations.AddField(
            model_name="b2b",
            name="reserved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="b2b_reservations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="b2b",
            name="room",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="b2b",
                to="hipeac.room",
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="authored_articles",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="event",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="articles",
                to="hipeac.event",
            ),
        ),
        migrations.AddField(
            model_name="article",
            name="institutions",
            field=models.ManyToManyField(blank=True, related_name="articles", to="hipeac.Institution"),
        ),
        migrations.AddField(
            model_name="article",
            name="projects",
            field=models.ManyToManyField(blank=True, related_name="articles", to="hipeac.Project"),
        ),
        migrations.AddField(
            model_name="actionpoint",
            name="owners",
            field=models.ManyToManyField(related_name="action_points", to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name="session",
            index=models.Index(fields=["event"], name="hipeac_sess_event_i_7b3339_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="registrationlog",
            unique_together={("registration", "session"), ("registration", "course")},
        ),
        migrations.AddIndex(
            model_name="registration",
            index=models.Index(fields=["uuid"], name="hipeac_regi_uuid_33aef4_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="registration",
            unique_together={("event", "user")},
        ),
        migrations.AddIndex(
            model_name="quote",
            index=models.Index(fields=["type"], name="hipeac_quot_type_5be033_idx"),
        ),
        migrations.AddIndex(
            model_name="profile",
            index=models.Index(fields=["membership_tags"], name="hipeac_prof_members_7d3555_idx"),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(fields=["category", "user", "object_id"], name="hipeac_noti_categor_ffe850_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="internshipapplication",
            unique_together={("internship", "created_by")},
        ),
        migrations.AddIndex(
            model_name="file",
            index=models.Index(fields=["file"], name="hipeac_file_file_2bc3b0_idx"),
        ),
        migrations.AddIndex(
            model_name="coupon",
            index=models.Index(fields=["code"], name="hipeac_coup_code_86749f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="block",
            unique_together={("page", "key")},
        ),
    ]
